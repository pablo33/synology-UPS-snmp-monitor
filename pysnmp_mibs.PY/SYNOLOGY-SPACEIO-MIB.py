#
# PySNMP MIB module SYNOLOGY-SPACEIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./SYNOLOGY-SPACEIO-MIB.txt
# Produced by pysmi-1.1.11 at Wed Jan 10 17:46:50 2024
# On host pablo-VBox platform Linux version 6.2.0-39-generic by user pablo
# Using Python version 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, NotificationType, enterprises, Unsigned32, IpAddress, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Bits, Counter32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "NotificationType", "enterprises", "Unsigned32", "IpAddress", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
spaceIO = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 102))
spaceIO.setRevisions(('2013-09-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: spaceIO.setRevisionsDescriptions(('Second draft.',))
if mibBuilder.loadTexts: spaceIO.setLastUpdated('201309110000Z')
if mibBuilder.loadTexts: spaceIO.setOrganization('www.synology.com')
if mibBuilder.loadTexts: spaceIO.setContactInfo('Synology Inc. Email: snmp@synology.com')
if mibBuilder.loadTexts: spaceIO.setDescription('Characteristics of the space io information')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
spaceIOTable = MibTable((1, 3, 6, 1, 4, 1, 6574, 102, 1), )
if mibBuilder.loadTexts: spaceIOTable.setStatus('current')
if mibBuilder.loadTexts: spaceIOTable.setDescription('Table of IO devices and how much data they have read/written.')
spaceIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1), ).setIndexNames((0, "SYNOLOGY-SPACEIO-MIB", "spaceIOIndex"))
if mibBuilder.loadTexts: spaceIOEntry.setStatus('current')
if mibBuilder.loadTexts: spaceIOEntry.setDescription('An entry containing a device and its statistics.')
spaceIOIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: spaceIOIndex.setStatus('current')
if mibBuilder.loadTexts: spaceIOIndex.setDescription('Reference index for each observed device.')
spaceIODevice = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIODevice.setStatus('current')
if mibBuilder.loadTexts: spaceIODevice.setDescription('The name of the device we are counting/checking.')
spaceIONRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONRead.setStatus('current')
if mibBuilder.loadTexts: spaceIONRead.setDescription('The number of bytes read from this device since boot.')
spaceIONWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONWritten.setStatus('current')
if mibBuilder.loadTexts: spaceIONWritten.setDescription('The number of bytes written to this device since boot.')
spaceIOReads = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOReads.setStatus('current')
if mibBuilder.loadTexts: spaceIOReads.setDescription('The number of read accesses from this device since boot.')
spaceIOWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOWrites.setStatus('current')
if mibBuilder.loadTexts: spaceIOWrites.setDescription('The number of write accesses to this device since boot.')
spaceIOLA = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA.setStatus('current')
if mibBuilder.loadTexts: spaceIOLA.setDescription('The load of disk (%)')
spaceIOLA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA1.setStatus('current')
if mibBuilder.loadTexts: spaceIOLA1.setDescription('The 1 minute average load of disk (%)')
spaceIOLA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA5.setStatus('current')
if mibBuilder.loadTexts: spaceIOLA5.setDescription('The 5 minute average load of disk (%)')
spaceIOLA15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA15.setStatus('current')
if mibBuilder.loadTexts: spaceIOLA15.setDescription('The 15 minute average load of disk (%)')
spaceIONReadX = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONReadX.setStatus('current')
if mibBuilder.loadTexts: spaceIONReadX.setDescription('The number of bytes read from this device since boot.')
spaceIONWrittenX = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONWrittenX.setStatus('current')
if mibBuilder.loadTexts: spaceIONWrittenX.setDescription('The number of bytes written to this device since boot.')
spaceUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceUUID.setStatus('current')
if mibBuilder.loadTexts: spaceUUID.setDescription('The uuid of space.')
spaceIOConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2))
spaceIOCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2, 1))
spaceIOGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2, 2))
spaceIOCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 102, 2, 1, 1)).setObjects(("SYNOLOGY-SPACEIO-MIB", "spaceIOGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spaceIOCompliance = spaceIOCompliance.setStatus('current')
if mibBuilder.loadTexts: spaceIOCompliance.setDescription('The compliance statement for space IO entities which implement the SYNOLOGY SPACEIO MIB.')
spaceIOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 102, 2, 2, 1)).setObjects(("SYNOLOGY-SPACEIO-MIB", "spaceIODevice"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONRead"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONWritten"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOReads"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOWrites"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA1"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA5"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA15"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONReadX"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONWrittenX"), ("SYNOLOGY-SPACEIO-MIB", "spaceUUID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spaceIOGroup = spaceIOGroup.setStatus('current')
if mibBuilder.loadTexts: spaceIOGroup.setDescription('A collection of objects providing basic information of an synology space io entity.')
mibBuilder.exportSymbols("SYNOLOGY-SPACEIO-MIB", spaceIODevice=spaceIODevice, spaceIOLA5=spaceIOLA5, spaceIOLA1=spaceIOLA1, PYSNMP_MODULE_ID=spaceIO, spaceUUID=spaceUUID, spaceIO=spaceIO, spaceIONRead=spaceIONRead, spaceIOReads=spaceIOReads, spaceIOGroups=spaceIOGroups, spaceIOLA15=spaceIOLA15, spaceIOTable=spaceIOTable, spaceIOEntry=spaceIOEntry, spaceIOIndex=spaceIOIndex, spaceIONWrittenX=spaceIONWrittenX, synology=synology, spaceIOConformance=spaceIOConformance, spaceIOLA=spaceIOLA, spaceIOCompliance=spaceIOCompliance, spaceIONWritten=spaceIONWritten, spaceIOGroup=spaceIOGroup, spaceIOCompliances=spaceIOCompliances, spaceIOWrites=spaceIOWrites, spaceIONReadX=spaceIONReadX)

#
# PySNMP MIB module SYNOLOGY-DISK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./SYNOLOGY-DISK-MIB.txt
# Produced by pysmi-1.1.11 at Wed Jan 10 17:45:24 2024
# On host pablo-VBox platform Linux version 6.2.0-39-generic by user pablo
# Using Python version 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Unsigned32, Gauge32, Counter64, TimeTicks, MibIdentifier, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter32, Integer32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "TimeTicks", "MibIdentifier", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter32", "Integer32", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
synoDisk = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 2))
synoDisk.setRevisions(('2013-09-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: synoDisk.setRevisionsDescriptions(('Second draft.',))
if mibBuilder.loadTexts: synoDisk.setLastUpdated('201309110000Z')
if mibBuilder.loadTexts: synoDisk.setOrganization('www.synology.com')
if mibBuilder.loadTexts: synoDisk.setContactInfo('Synology Inc. Email: snmp@synology.com')
if mibBuilder.loadTexts: synoDisk.setDescription('Characteristics of the disk information')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
diskTable = MibTable((1, 3, 6, 1, 4, 1, 6574, 2, 1), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('Synology disk table')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1), ).setIndexNames((0, "SYNOLOGY-DISK-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('For all disk entry')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('current')
if mibBuilder.loadTexts: diskIndex.setDescription('The index of disk table')
diskID = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskID.setStatus('current')
if mibBuilder.loadTexts: diskID.setDescription('Synology disk ID The ID of disk is assigned by disk Station. ')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('current')
if mibBuilder.loadTexts: diskModel.setDescription('Synology disk model name The disk model name will be showed here. ')
diskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskType.setStatus('current')
if mibBuilder.loadTexts: diskType.setDescription('Synology disk type The type of disk will be showed here, including SATA, SSD and so on. ')
diskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatus.setStatus('current')
if mibBuilder.loadTexts: diskStatus.setDescription('Synology disk status Each meanings of status represented describe below. Normal(1): The hard disk functions normally. Initialized(2): The hard disk has system partition but no data. NotInitialized(3): The hard disk does not have system in system partition. SystemPartitionFailed(4): The system partitions on the hard disks are damaged. Crashed(5): The hard disk has damaged. ')
diskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperature.setStatus('current')
if mibBuilder.loadTexts: diskTemperature.setDescription('Synology disk temperature The temperature of each disk uses Celsius degree. ')
diskRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRole.setStatus('current')
if mibBuilder.loadTexts: diskRole.setDescription('Synology disk role The role of the disk in system. Could be: data, cache, hotspare, none ')
diskRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRetry.setStatus('current')
if mibBuilder.loadTexts: diskRetry.setDescription('Synology disk retry count The count of each disk connection retries. ')
diskBadSector = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBadSector.setStatus('current')
if mibBuilder.loadTexts: diskBadSector.setDescription('Synology disk bad sector count The count of each disk I/O bad sector. ')
diskIdentifyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIdentifyFail.setStatus('current')
if mibBuilder.loadTexts: diskIdentifyFail.setDescription('Synology disk identify fail count The count of each disk identify fails. ')
diskRemainLife = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRemainLife.setStatus('current')
if mibBuilder.loadTexts: diskRemainLife.setDescription('Synology disk remainLife The estimate remain life of each disk. ')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
if mibBuilder.loadTexts: diskName.setDescription('Synology disk name The name of disk which align to storage manager. ')
diskHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHealthStatus.setStatus('current')
if mibBuilder.loadTexts: diskHealthStatus.setDescription('Synology disk health status Each meanings of status represented describe below. Normal(1): The disk health status is normal. Warning(2): The disk health status is warning. Critical(3): The disk health status is critical. Failing(4): The disk health status is failing. ')
diskConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 2, 2))
diskCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 2, 2, 1))
diskGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 2, 2, 2))
diskCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 2, 2, 1, 1)).setObjects(("SYNOLOGY-DISK-MIB", "diskGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskCompliance = diskCompliance.setStatus('current')
if mibBuilder.loadTexts: diskCompliance.setDescription('The compliance statement for synoDisk entities which implement the SYNOLOGY DISK MIB.')
diskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 2, 2, 2, 1)).setObjects(("SYNOLOGY-DISK-MIB", "diskIndex"), ("SYNOLOGY-DISK-MIB", "diskID"), ("SYNOLOGY-DISK-MIB", "diskModel"), ("SYNOLOGY-DISK-MIB", "diskType"), ("SYNOLOGY-DISK-MIB", "diskStatus"), ("SYNOLOGY-DISK-MIB", "diskTemperature"), ("SYNOLOGY-DISK-MIB", "diskRole"), ("SYNOLOGY-DISK-MIB", "diskRetry"), ("SYNOLOGY-DISK-MIB", "diskBadSector"), ("SYNOLOGY-DISK-MIB", "diskIdentifyFail"), ("SYNOLOGY-DISK-MIB", "diskRemainLife"), ("SYNOLOGY-DISK-MIB", "diskName"), ("SYNOLOGY-DISK-MIB", "diskHealthStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskGroup = diskGroup.setStatus('current')
if mibBuilder.loadTexts: diskGroup.setDescription('A collection of objects providing basic information of an synology disk entity.')
mibBuilder.exportSymbols("SYNOLOGY-DISK-MIB", diskName=diskName, synoDisk=synoDisk, PYSNMP_MODULE_ID=synoDisk, diskHealthStatus=diskHealthStatus, diskIndex=diskIndex, diskType=diskType, diskCompliance=diskCompliance, synology=synology, diskRole=diskRole, diskModel=diskModel, diskCompliances=diskCompliances, diskGroups=diskGroups, diskRetry=diskRetry, diskBadSector=diskBadSector, diskID=diskID, diskIdentifyFail=diskIdentifyFail, diskStatus=diskStatus, diskRemainLife=diskRemainLife, diskEntry=diskEntry, diskTemperature=diskTemperature, diskConformance=diskConformance, diskGroup=diskGroup, diskTable=diskTable)

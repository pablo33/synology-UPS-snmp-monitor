#
# PySNMP MIB module SYNOLOGY-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./SYNOLOGY-UPS-MIB.txt
# Produced by pysmi-1.1.11 at Wed Jan 10 17:39:04 2024
# On host pablo-VBox platform Linux version 6.2.0-39-generic by user pablo
# Using Python version 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
Float, = mibBuilder.importSymbols("NET-SNMP-TC", "Float")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, iso, Gauge32, NotificationType, Bits, ObjectIdentity, IpAddress, Integer32, Counter32, ModuleIdentity, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Gauge32", "NotificationType", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "Counter32", "ModuleIdentity", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
synoUPS = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 4))
synoUPS.setRevisions(('2013-09-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: synoUPS.setRevisionsDescriptions(('Second draft.',))
if mibBuilder.loadTexts: synoUPS.setLastUpdated('201309110000Z')
if mibBuilder.loadTexts: synoUPS.setOrganization('www.synology.com')
if mibBuilder.loadTexts: synoUPS.setContactInfo('Synology Inc. Email: snmp@synology.com')
if mibBuilder.loadTexts: synoUPS.setDescription('Characteristics of the ups information')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

upsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 1))
upsDeviceModel = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceModel.setStatus('current')
if mibBuilder.loadTexts: upsDeviceModel.setDescription('Device model')
upsDeviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceManufacturer.setStatus('current')
if mibBuilder.loadTexts: upsDeviceManufacturer.setDescription('Device manufacturer')
upsDeviceSerial = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceSerial.setStatus('current')
if mibBuilder.loadTexts: upsDeviceSerial.setDescription('Device serial number.')
upsDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceType.setStatus('current')
if mibBuilder.loadTexts: upsDeviceType.setDescription('Device type (ups, pdu, scd, psu)')
upsDeviceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: upsDeviceDescription.setDescription('Device description.')
upsDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceContact.setStatus('current')
if mibBuilder.loadTexts: upsDeviceContact.setDescription('Device administrator name.')
upsDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceLocation.setStatus('current')
if mibBuilder.loadTexts: upsDeviceLocation.setDescription('Device physical location.')
upsDevicePart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDevicePart.setStatus('current')
if mibBuilder.loadTexts: upsDevicePart.setDescription('Device part number.')
upsDeviceMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceMACAddr.setStatus('current')
if mibBuilder.loadTexts: upsDeviceMACAddr.setDescription('Physical network address of the device.')
upsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2))
upsInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStatus.setStatus('current')
if mibBuilder.loadTexts: upsInfoStatus.setDescription('UPS status.')
upsInfoAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoAlarm.setStatus('current')
if mibBuilder.loadTexts: upsInfoAlarm.setDescription('UPS alarms')
upsInfoTime = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTime.setStatus('current')
if mibBuilder.loadTexts: upsInfoTime.setDescription('Internal UPS clock time')
upsInfoDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDate.setStatus('current')
if mibBuilder.loadTexts: upsInfoDate.setDescription('Internal UPS clock date')
upsInfoModel = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoModel.setStatus('current')
if mibBuilder.loadTexts: upsInfoModel.setDescription('UPS model')
upsInfoMfr = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6))
upsInfoMfrName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMfrName.setStatus('current')
if mibBuilder.loadTexts: upsInfoMfrName.setDescription('UPS manufacturer')
upsInfoMfrDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMfrDate.setStatus('current')
if mibBuilder.loadTexts: upsInfoMfrDate.setDescription('UPS manufacturing date')
upsInfoSerial = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSerial.setStatus('current')
if mibBuilder.loadTexts: upsInfoSerial.setDescription('UPS serial number')
upsInfoVendorID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoVendorID.setStatus('current')
if mibBuilder.loadTexts: upsInfoVendorID.setDescription('Vendor ID for USB devices')
upsInfoProductID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoProductID.setStatus('current')
if mibBuilder.loadTexts: upsInfoProductID.setDescription('Product ID for USB devices')
upsInfoFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10))
upsInfoFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoFirmwareName.setStatus('current')
if mibBuilder.loadTexts: upsInfoFirmwareName.setDescription('UPS firmware')
upsInfoFirmwareAux = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoFirmwareAux.setStatus('current')
if mibBuilder.loadTexts: upsInfoFirmwareAux.setDescription('Auxiliary device firmware')
upsInfoTemperature = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 11), Float()).setUnits('degree C').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTemperature.setStatus('current')
if mibBuilder.loadTexts: upsInfoTemperature.setDescription('UPS temperature (degrees C)')
upsInfoLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12))
upsInfoLoadValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12, 1), Float()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLoadValue.setStatus('current')
if mibBuilder.loadTexts: upsInfoLoadValue.setDescription('Load on UPS (percent)')
upsInfoLoadHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12, 2), Float()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLoadHigh.setStatus('current')
if mibBuilder.loadTexts: upsInfoLoadHigh.setDescription('Load when UPS switches to overload condition (OVER) (percent)')
upsInfoID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoID.setStatus('current')
if mibBuilder.loadTexts: upsInfoID.setDescription('UPS system identifier')
upsInfoDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14))
upsInfoDelayStart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayStart.setStatus('current')
if mibBuilder.loadTexts: upsInfoDelayStart.setDescription('Interval to wait before restarting the load (seconds)')
upsInfoDelayReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayReboot.setStatus('current')
if mibBuilder.loadTexts: upsInfoDelayReboot.setDescription('Interval to wait before rebooting the UPS (seconds)')
upsInfoDelayShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 3), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayShutdown.setStatus('current')
if mibBuilder.loadTexts: upsInfoDelayShutdown.setDescription('Interval to wait after shutdown with delay command (seconds)')
upsInfoTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15))
upsInfoTimerStart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerStart.setStatus('current')
if mibBuilder.loadTexts: upsInfoTimerStart.setDescription('Time before the load will be started (seconds)')
upsInfoTimerReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerReboot.setStatus('current')
if mibBuilder.loadTexts: upsInfoTimerReboot.setDescription('Time before the load will be rebooted (seconds)')
upsInfoTimerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 3), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerShutdown.setStatus('current')
if mibBuilder.loadTexts: upsInfoTimerShutdown.setDescription('Time before the load will be shutdown (seconds)')
upsInfoTest = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16))
upsInfoTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTestInterval.setStatus('current')
if mibBuilder.loadTexts: upsInfoTestInterval.setDescription('Interval between self tests')
upsInfoTestResult = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTestResult.setStatus('current')
if mibBuilder.loadTexts: upsInfoTestResult.setDescription('Results of last self test')
upsInfoDisplayLanguage = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDisplayLanguage.setStatus('current')
if mibBuilder.loadTexts: upsInfoDisplayLanguage.setDescription('Language to use on front panel')
upsInfoContacts = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoContacts.setStatus('current')
if mibBuilder.loadTexts: upsInfoContacts.setDescription('UPS external contact sensors')
upsInfoEffciency = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 19), NonNegativeInteger()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoEffciency.setStatus('current')
if mibBuilder.loadTexts: upsInfoEffciency.setDescription('Efficiency of the UPS (ratio of the output current on the input current) (percent)')
upsInfoPower = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20))
upsInfoPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20, 1), Float()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoPowerValue.setStatus('current')
if mibBuilder.loadTexts: upsInfoPowerValue.setDescription('Current value of apparent power (Volt-Amps)')
upsInfoPowerNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20, 2), Float()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoPowerNominal.setStatus('current')
if mibBuilder.loadTexts: upsInfoPowerNominal.setDescription('Nominal value of apparent power (Volt-Amps)')
upsInfoRealPower = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21))
upsInfoRealPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21, 1), Float()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoRealPowerValue.setStatus('current')
if mibBuilder.loadTexts: upsInfoRealPowerValue.setDescription('Current value of real power (Watts)')
upsInfoRealPowerNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21, 2), Float()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoRealPowerNominal.setStatus('current')
if mibBuilder.loadTexts: upsInfoRealPowerNominal.setDescription('Nominal value of real power (Watts)')
upsInfoBeeperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoBeeperStatus.setStatus('current')
if mibBuilder.loadTexts: upsInfoBeeperStatus.setDescription('UPS beeper status (enabled, disabled or muted)')
upsInfoType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoType.setStatus('current')
if mibBuilder.loadTexts: upsInfoType.setDescription('UPS type')
upsInfoWatchdogStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoWatchdogStatus.setStatus('current')
if mibBuilder.loadTexts: upsInfoWatchdogStatus.setDescription('UPS watchdog status (enabled or disabled)')
upsInfoStart = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25))
upsInfoStartAuto = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartAuto.setStatus('current')
if mibBuilder.loadTexts: upsInfoStartAuto.setDescription('UPS starts when mains is (re)applied')
upsInfoStartBattery = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartBattery.setStatus('current')
if mibBuilder.loadTexts: upsInfoStartBattery.setDescription('Allow to start UPS from battery')
upsInfoStartReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartReboot.setStatus('current')
if mibBuilder.loadTexts: upsInfoStartReboot.setDescription('UPS coldstarts from battery (enabled or disabled)')
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3))
upsBatteryCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1))
upsBatteryChargeValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 1), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeValue.setStatus('current')
if mibBuilder.loadTexts: upsBatteryChargeValue.setDescription('Battery charge')
upsBatteryChargeLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 2), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeLow.setStatus('current')
if mibBuilder.loadTexts: upsBatteryChargeLow.setDescription('Remaining battery level when UPS switches to LB (percent)')
upsBatteryChargeRestart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 3), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeRestart.setStatus('current')
if mibBuilder.loadTexts: upsBatteryChargeRestart.setDescription('Minimum battery level for UPS restart after power-off')
upsBatteryChargeWarning = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 4), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeWarning.setStatus('current')
if mibBuilder.loadTexts: upsBatteryChargeWarning.setDescription('Battery level when UPS switches to Warning state (percent)')
upsBatteryVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2))
upsBatteryVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 1), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageValue.setStatus('current')
if mibBuilder.loadTexts: upsBatteryVoltageValue.setDescription('The magnitude of the present battery voltage.')
upsBatteryVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 2), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageNominal.setStatus('current')
if mibBuilder.loadTexts: upsBatteryVoltageNominal.setDescription('Nominal battery voltage.')
upsBatteryVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 3), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageLow.setStatus('current')
if mibBuilder.loadTexts: upsBatteryVoltageLow.setDescription('Minimum battery voltage, that triggers FSD status .')
upsBatteryVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 4), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: upsBatteryVoltageHigh.setDescription('Maximum battery voltage (Ie battery.charge = 100).')
upsBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 3), Float()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCapacity.setStatus('current')
if mibBuilder.loadTexts: upsBatteryCapacity.setDescription('Battery capacity (Ah)')
upsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 4), Float()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: upsBatteryCurrent.setDescription('The present battery current.')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 5), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: upsBatteryTemperature.setDescription('The ambient temperature at or near the UPS Battery casing.')
upsBatteryRuntime = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6))
upsBatteryRuntimeValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 1), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeValue.setStatus('current')
if mibBuilder.loadTexts: upsBatteryRuntimeValue.setDescription('Battery runtime (seconds)')
upsBatteryRuntimeLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 2), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeLow.setStatus('current')
if mibBuilder.loadTexts: upsBatteryRuntimeLow.setDescription('Remaining battery runtime when UPS switches to LB (seconds)')
upsBatteryRuntimeRestart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 3), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeRestart.setStatus('current')
if mibBuilder.loadTexts: upsBatteryRuntimeRestart.setDescription('Minimum battery runtime for UPS restart after power-off (seconds)')
upsBatteryAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: upsBatteryAlarmThreshold.setDescription('Battery alarm threshold')
upsBatteryDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryDate.setStatus('current')
if mibBuilder.loadTexts: upsBatteryDate.setDescription('Battery change date')
upsBatteryMfrDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryMfrDate.setStatus('current')
if mibBuilder.loadTexts: upsBatteryMfrDate.setDescription('Battery manufacturing date')
upsBatteryPacks = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryPacks.setStatus('current')
if mibBuilder.loadTexts: upsBatteryPacks.setDescription('Number of battery packs')
upsBatteryPacksBad = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryPacksBad.setStatus('current')
if mibBuilder.loadTexts: upsBatteryPacksBad.setDescription('Number of bad battery packs')
upsBatteryType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryType.setStatus('current')
if mibBuilder.loadTexts: upsBatteryType.setDescription('Battery chemistry')
upsBatteryProtection = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryProtection.setStatus('current')
if mibBuilder.loadTexts: upsBatteryProtection.setDescription('Prevent deep discharge of battery')
upsBatteryEnergySave = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryEnergySave.setStatus('current')
if mibBuilder.loadTexts: upsBatteryEnergySave.setDescription('Switch off when running on battery and no/low load')
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4))
upsInputVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1))
upsInputVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 1), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageValue.setDescription('Input voltage')
upsInputVoltageMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageMax.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageMax.setDescription('Maximum incoming voltage seen')
upsInputVoltageMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 3), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageMin.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageMin.setDescription('Minimum incoming voltage seen')
upsInputVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 4), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageNominal.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageNominal.setDescription('Nominal input voltage')
upsInputVoltageExtend = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageExtend.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageExtend.setDescription('Extended input voltage range')
upsInputVoltageFault = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 6), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageFault.setStatus('current')
if mibBuilder.loadTexts: upsInputVoltageFault.setDescription('Input voltage Fault')
upsInputTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2))
upsInputTransferReason = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferReason.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferReason.setDescription('Reason for last transfer to battery')
upsInputTransferLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLow.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferLow.setDescription('Low voltage transfer point')
upsInputTransferHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 3), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHigh.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferHigh.setDescription('High voltage transfer point')
upsInputTransferLowMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 4), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLowMin.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferLowMin.setDescription('smallest settable low voltage transfer point')
upsInputTransferLowMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 5), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLowMax.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferLowMax.setDescription('greatest settable low voltage transfer point')
upsInputTransferHighMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 6), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHighMin.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferHighMin.setDescription('smallest settable high voltage transfer point')
upsInputTransferHighMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 7), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHighMax.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferHighMax.setDescription('greatest settable high voltage transfer point')
upsInputTransferBoostLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 8), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferBoostLow.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferBoostLow.setDescription('Low voltage boosting transfer point')
upsInputTransferBoostHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 9), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferBoostHigh.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferBoostHigh.setDescription('High voltage boosting transfer point')
upsInputTransferTrimLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 10), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferTrimLow.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferTrimLow.setDescription('Low voltage trimming transfer point')
upsInputTransferTrimHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 11), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferTrimHigh.setStatus('current')
if mibBuilder.loadTexts: upsInputTransferTrimHigh.setDescription('High voltage trimming transfer point')
upsInputSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputSensitivity.setStatus('current')
if mibBuilder.loadTexts: upsInputSensitivity.setDescription('Input power sensitivity')
upsInputQuality = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputQuality.setStatus('current')
if mibBuilder.loadTexts: upsInputQuality.setDescription('Input power quality')
upsInputCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5))
upsInputCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5, 1), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: upsInputCurrentValue.setDescription('Input current (A)')
upsInputCurrentNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5, 2), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentNominal.setStatus('current')
if mibBuilder.loadTexts: upsInputCurrentNominal.setDescription('Nominal input current (A)')
upsInputFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6))
upsInputFrequencyValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 1), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyValue.setStatus('current')
if mibBuilder.loadTexts: upsInputFrequencyValue.setDescription('Input line frequency (Hz)')
upsInputFrequencyNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 2), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyNominal.setStatus('current')
if mibBuilder.loadTexts: upsInputFrequencyNominal.setDescription('Nominal input line frequency (Hz)')
upsInputFrequencyLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 3), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyLow.setStatus('current')
if mibBuilder.loadTexts: upsInputFrequencyLow.setDescription('Input line frequency low (Hz)')
upsInputFrequencyHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 4), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyHigh.setStatus('current')
if mibBuilder.loadTexts: upsInputFrequencyHigh.setDescription('Input line frequency high (Hz)')
upsInputFrequencyExtend = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyExtend.setStatus('current')
if mibBuilder.loadTexts: upsInputFrequencyExtend.setDescription('Extended input frequency range')
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5))
upsOutputVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1))
upsOutputVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1, 1), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: upsOutputVoltageValue.setDescription('Output voltage (V)')
upsOutputVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltageNominal.setStatus('current')
if mibBuilder.loadTexts: upsOutputVoltageNominal.setDescription('Nominal output voltage (V)')
upsOutputFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2))
upsOutputFrequencyValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2, 1), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequencyValue.setStatus('current')
if mibBuilder.loadTexts: upsOutputFrequencyValue.setDescription('Output frequency (Hz)')
upsOutputFrequencyNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2, 2), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequencyNominal.setStatus('current')
if mibBuilder.loadTexts: upsOutputFrequencyNominal.setDescription('Nominal output frequency (Hz)')
upsOutputCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3))
upsOutputCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3, 1), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: upsOutputCurrentValue.setDescription('Output current (A)')
upsOutputCurrentNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3, 2), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentNominal.setStatus('current')
if mibBuilder.loadTexts: upsOutputCurrentNominal.setDescription('Nominal output current (A)')
upsAmbient = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6))
upsAmbientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1))
upsAmbientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 1), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureValue.setDescription('Ambient temperature (degrees C)')
upsAmbientTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setUnits('enabled/disabled').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureAlarm.setDescription('Temperature alarm (enabled/disabled)')
upsAmbientTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 3), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureHigh.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureHigh.setDescription('Temperature threshold high (degrees C)')
upsAmbientTemperatureLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 4), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureLow.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureLow.setDescription('Temperature threshold low (degrees C)')
upsAmbientTemperatureMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 5), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureMax.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureMax.setDescription('Maximum temperature seen (degrees C)')
upsAmbientTemperatureMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 6), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureMin.setStatus('current')
if mibBuilder.loadTexts: upsAmbientTemperatureMin.setDescription('Minimum temperature seen (degrees C)')
upsAmbientHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2))
upsAmbientHumidityValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 1), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityValue.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityValue.setDescription('Ambient relative humidity (percent)')
upsAmbientHumidityAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setUnits('enabled/disabled').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityAlarm.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityAlarm.setDescription('Relative humidity alarm (enabled/disabled)')
upsAmbientHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 3), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityHigh.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityHigh.setDescription('Relative humidity threshold high (percent)')
upsAmbientHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 4), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityLow.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityLow.setDescription('Relative humidity threshold low (percent)')
upsAmbientHumidityMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 5), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityMax.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityMax.setDescription('Maximum relative humidity seen (percent)')
upsAmbientHumidityMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 6), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityMin.setStatus('current')
if mibBuilder.loadTexts: upsAmbientHumidityMin.setDescription('Minimum relative humidity seen (percent)')
upsDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 7))
upsDriverName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverName.setStatus('current')
if mibBuilder.loadTexts: upsDriverName.setDescription('Driver name')
upsDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersion.setStatus('current')
if mibBuilder.loadTexts: upsDriverVersion.setDescription('Driver version (NUT release)')
upsDriverVersionData = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersionData.setStatus('current')
if mibBuilder.loadTexts: upsDriverVersionData.setDescription('Driver version data')
upsDriverVersionInternal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersionInternal.setStatus('current')
if mibBuilder.loadTexts: upsDriverVersionInternal.setDescription('Internal driver version (if tracked separately)')
upsDriverPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 5), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPollInterval.setStatus('current')
if mibBuilder.loadTexts: upsDriverPollInterval.setDescription('Poll interval setup in configuration file')
upsDriverPort = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPort.setStatus('current')
if mibBuilder.loadTexts: upsDriverPort.setDescription('Port setup in configuration file')
upsDriverPollFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPollFrequency.setStatus('current')
if mibBuilder.loadTexts: upsDriverPollFrequency.setDescription('Poll frequency')
upsDriverProductID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverProductID.setStatus('current')
if mibBuilder.loadTexts: upsDriverProductID.setDescription('Product ID')
upsDriverSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: upsDriverSnmpVersion.setDescription('Snmp version')
upsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 8))
upsServerInfo = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsServerInfo.setStatus('current')
if mibBuilder.loadTexts: upsServerInfo.setDescription('Server information')
upsServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsServerVersion.setStatus('current')
if mibBuilder.loadTexts: upsServerVersion.setDescription('Server version')
upsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9))
upsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9, 1))
upsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9, 2))
upsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 4, 9, 1, 1)).setObjects(("SYNOLOGY-UPS-MIB", "upsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    upsCompliance = upsCompliance.setStatus('current')
if mibBuilder.loadTexts: upsCompliance.setDescription('The compliance statement for synoSystem entities which implement the SYNOLOGY SYSTEM MIB.')
upsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 4, 9, 2, 1)).setObjects(("SYNOLOGY-UPS-MIB", "upsDeviceModel"), ("SYNOLOGY-UPS-MIB", "upsDeviceManufacturer"), ("SYNOLOGY-UPS-MIB", "upsDeviceSerial"), ("SYNOLOGY-UPS-MIB", "upsDeviceType"), ("SYNOLOGY-UPS-MIB", "upsDeviceDescription"), ("SYNOLOGY-UPS-MIB", "upsDeviceContact"), ("SYNOLOGY-UPS-MIB", "upsDeviceLocation"), ("SYNOLOGY-UPS-MIB", "upsDevicePart"), ("SYNOLOGY-UPS-MIB", "upsDeviceMACAddr"), ("SYNOLOGY-UPS-MIB", "upsInfoStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoAlarm"), ("SYNOLOGY-UPS-MIB", "upsInfoTime"), ("SYNOLOGY-UPS-MIB", "upsInfoDate"), ("SYNOLOGY-UPS-MIB", "upsInfoModel"), ("SYNOLOGY-UPS-MIB", "upsInfoMfrName"), ("SYNOLOGY-UPS-MIB", "upsInfoMfrDate"), ("SYNOLOGY-UPS-MIB", "upsInfoSerial"), ("SYNOLOGY-UPS-MIB", "upsInfoVendorID"), ("SYNOLOGY-UPS-MIB", "upsInfoProductID"), ("SYNOLOGY-UPS-MIB", "upsInfoFirmwareName"), ("SYNOLOGY-UPS-MIB", "upsInfoFirmwareAux"), ("SYNOLOGY-UPS-MIB", "upsInfoTemperature"), ("SYNOLOGY-UPS-MIB", "upsInfoLoadValue"), ("SYNOLOGY-UPS-MIB", "upsInfoLoadHigh"), ("SYNOLOGY-UPS-MIB", "upsInfoID"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayStart"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayReboot"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayShutdown"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerStart"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerReboot"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerShutdown"), ("SYNOLOGY-UPS-MIB", "upsInfoTestInterval"), ("SYNOLOGY-UPS-MIB", "upsInfoTestResult"), ("SYNOLOGY-UPS-MIB", "upsInfoDisplayLanguage"), ("SYNOLOGY-UPS-MIB", "upsInfoContacts"), ("SYNOLOGY-UPS-MIB", "upsInfoEffciency"), ("SYNOLOGY-UPS-MIB", "upsInfoPowerValue"), ("SYNOLOGY-UPS-MIB", "upsInfoPowerNominal"), ("SYNOLOGY-UPS-MIB", "upsInfoRealPowerValue"), ("SYNOLOGY-UPS-MIB", "upsInfoRealPowerNominal"), ("SYNOLOGY-UPS-MIB", "upsInfoBeeperStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoType"), ("SYNOLOGY-UPS-MIB", "upsInfoWatchdogStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoStartAuto"), ("SYNOLOGY-UPS-MIB", "upsInfoStartBattery"), ("SYNOLOGY-UPS-MIB", "upsInfoStartReboot"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeRestart"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeWarning"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageHigh"), ("SYNOLOGY-UPS-MIB", "upsBatteryCapacity"), ("SYNOLOGY-UPS-MIB", "upsBatteryCurrent"), ("SYNOLOGY-UPS-MIB", "upsBatteryTemperature"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeRestart"), ("SYNOLOGY-UPS-MIB", "upsBatteryAlarmThreshold"), ("SYNOLOGY-UPS-MIB", "upsBatteryDate"), ("SYNOLOGY-UPS-MIB", "upsBatteryMfrDate"), ("SYNOLOGY-UPS-MIB", "upsBatteryPacks"), ("SYNOLOGY-UPS-MIB", "upsBatteryPacksBad"), ("SYNOLOGY-UPS-MIB", "upsBatteryType"), ("SYNOLOGY-UPS-MIB", "upsBatteryProtection"), ("SYNOLOGY-UPS-MIB", "upsBatteryEnergySave"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageMax"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageMin"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageExtend"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageFault"), ("SYNOLOGY-UPS-MIB", "upsInputTransferReason"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHigh"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLowMin"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLowMax"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHighMin"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHighMax"), ("SYNOLOGY-UPS-MIB", "upsInputTransferBoostLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferBoostHigh"), ("SYNOLOGY-UPS-MIB", "upsInputTransferTrimLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferTrimHigh"), ("SYNOLOGY-UPS-MIB", "upsInputSensitivity"), ("SYNOLOGY-UPS-MIB", "upsInputQuality"), ("SYNOLOGY-UPS-MIB", "upsInputCurrentValue"), ("SYNOLOGY-UPS-MIB", "upsInputCurrentNominal"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyValue"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyNominal"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyLow"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyHigh"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyExtend"), ("SYNOLOGY-UPS-MIB", "upsOutputVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsOutputVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsOutputFrequencyValue"), ("SYNOLOGY-UPS-MIB", "upsOutputFrequencyNominal"), ("SYNOLOGY-UPS-MIB", "upsOutputCurrentValue"), ("SYNOLOGY-UPS-MIB", "upsOutputCurrentNominal"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureValue"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureAlarm"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureHigh"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureLow"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureMax"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureMin"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityValue"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityAlarm"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityHigh"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityLow"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityMax"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityMin"), ("SYNOLOGY-UPS-MIB", "upsDriverName"), ("SYNOLOGY-UPS-MIB", "upsDriverVersion"), ("SYNOLOGY-UPS-MIB", "upsDriverVersionData"), ("SYNOLOGY-UPS-MIB", "upsDriverVersionInternal"), ("SYNOLOGY-UPS-MIB", "upsDriverPollInterval"), ("SYNOLOGY-UPS-MIB", "upsDriverPort"), ("SYNOLOGY-UPS-MIB", "upsDriverPollFrequency"), ("SYNOLOGY-UPS-MIB", "upsDriverProductID"), ("SYNOLOGY-UPS-MIB", "upsDriverSnmpVersion"), ("SYNOLOGY-UPS-MIB", "upsServerInfo"), ("SYNOLOGY-UPS-MIB", "upsServerVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    upsGroup = upsGroup.setStatus('current')
if mibBuilder.loadTexts: upsGroup.setDescription('A collection of objects providing basic information of an synology ups entity.')
mibBuilder.exportSymbols("SYNOLOGY-UPS-MIB", upsAmbientTemperatureAlarm=upsAmbientTemperatureAlarm, upsInputTransferTrimHigh=upsInputTransferTrimHigh, upsOutputVoltageNominal=upsOutputVoltageNominal, upsInfoDate=upsInfoDate, upsOutputFrequencyNominal=upsOutputFrequencyNominal, upsServerInfo=upsServerInfo, upsInputFrequencyValue=upsInputFrequencyValue, NonNegativeInteger=NonNegativeInteger, synoUPS=synoUPS, upsDeviceType=upsDeviceType, upsBatteryVoltageValue=upsBatteryVoltageValue, upsGroup=upsGroup, upsInfoDelay=upsInfoDelay, upsAmbientHumidityHigh=upsAmbientHumidityHigh, upsInputVoltageNominal=upsInputVoltageNominal, upsInfoRealPowerValue=upsInfoRealPowerValue, upsAmbient=upsAmbient, upsInfoStatus=upsInfoStatus, upsDriverName=upsDriverName, upsBatteryDate=upsBatteryDate, upsInputTransferBoostLow=upsInputTransferBoostLow, upsInfoStartAuto=upsInfoStartAuto, upsInputFrequencyNominal=upsInputFrequencyNominal, upsAmbientTemperatureHigh=upsAmbientTemperatureHigh, upsAmbientHumidityMin=upsAmbientHumidityMin, upsInfoDelayShutdown=upsInfoDelayShutdown, upsInputTransferHigh=upsInputTransferHigh, upsInfoDisplayLanguage=upsInfoDisplayLanguage, upsAmbientHumidityMax=upsAmbientHumidityMax, upsInfoRealPowerNominal=upsInfoRealPowerNominal, upsInputFrequency=upsInputFrequency, upsInputQuality=upsInputQuality, upsInfoTest=upsInfoTest, upsInfoEffciency=upsInfoEffciency, PYSNMP_MODULE_ID=synoUPS, upsInfoTemperature=upsInfoTemperature, upsBatteryCurrent=upsBatteryCurrent, upsDriverVersionData=upsDriverVersionData, upsBatteryChargeWarning=upsBatteryChargeWarning, upsAmbientHumidity=upsAmbientHumidity, upsInfoVendorID=upsInfoVendorID, upsDriverProductID=upsDriverProductID, upsInfoTestInterval=upsInfoTestInterval, upsInfoWatchdogStatus=upsInfoWatchdogStatus, synology=synology, upsBatteryPacksBad=upsBatteryPacksBad, upsInputTransferReason=upsInputTransferReason, upsDriver=upsDriver, upsDeviceModel=upsDeviceModel, upsAmbientHumidityAlarm=upsAmbientHumidityAlarm, upsBatteryEnergySave=upsBatteryEnergySave, upsInputVoltage=upsInputVoltage, upsInputTransfer=upsInputTransfer, upsBatteryType=upsBatteryType, upsDevicePart=upsDevicePart, upsBatteryRuntime=upsBatteryRuntime, upsInputVoltageExtend=upsInputVoltageExtend, upsBatteryCharge=upsBatteryCharge, upsInputTransferHighMin=upsInputTransferHighMin, upsOutputVoltageValue=upsOutputVoltageValue, upsDeviceManufacturer=upsDeviceManufacturer, upsInputCurrent=upsInputCurrent, upsBatteryChargeValue=upsBatteryChargeValue, upsInputCurrentNominal=upsInputCurrentNominal, upsInputTransferLowMin=upsInputTransferLowMin, upsInfoPowerValue=upsInfoPowerValue, upsInfo=upsInfo, upsDriverVersion=upsDriverVersion, upsInput=upsInput, upsInputTransferBoostHigh=upsInputTransferBoostHigh, upsOutputFrequency=upsOutputFrequency, upsBatteryVoltage=upsBatteryVoltage, upsInputVoltageMax=upsInputVoltageMax, upsInfoLoadHigh=upsInfoLoadHigh, upsOutputCurrentValue=upsOutputCurrentValue, upsInputTransferLow=upsInputTransferLow, upsInputSensitivity=upsInputSensitivity, upsInfoTimerStart=upsInfoTimerStart, upsInfoTimerShutdown=upsInfoTimerShutdown, upsDriverPollInterval=upsDriverPollInterval, upsInfoMfr=upsInfoMfr, upsBatteryRuntimeRestart=upsBatteryRuntimeRestart, upsBatteryPacks=upsBatteryPacks, upsInfoTimerReboot=upsInfoTimerReboot, upsAmbientHumidityValue=upsAmbientHumidityValue, upsInfoPower=upsInfoPower, upsCompliances=upsCompliances, upsBattery=upsBattery, upsInfoAlarm=upsInfoAlarm, upsBatteryVoltageHigh=upsBatteryVoltageHigh, upsInputVoltageMin=upsInputVoltageMin, upsInfoContacts=upsInfoContacts, upsInfoTimer=upsInfoTimer, upsOutputCurrentNominal=upsOutputCurrentNominal, upsInfoMfrDate=upsInfoMfrDate, upsBatteryCapacity=upsBatteryCapacity, upsInputCurrentValue=upsInputCurrentValue, upsDeviceDescription=upsDeviceDescription, upsConformance=upsConformance, upsBatteryVoltageLow=upsBatteryVoltageLow, upsAmbientHumidityLow=upsAmbientHumidityLow, upsInfoType=upsInfoType, upsInfoFirmwareAux=upsInfoFirmwareAux, upsInfoBeeperStatus=upsInfoBeeperStatus, upsInfoID=upsInfoID, upsInfoStartBattery=upsInfoStartBattery, upsBatteryRuntimeValue=upsBatteryRuntimeValue, upsDriverPollFrequency=upsDriverPollFrequency, upsInfoProductID=upsInfoProductID, upsBatteryChargeRestart=upsBatteryChargeRestart, upsBatteryVoltageNominal=upsBatteryVoltageNominal, upsBatteryTemperature=upsBatteryTemperature, upsDeviceContact=upsDeviceContact, upsDriverSnmpVersion=upsDriverSnmpVersion, upsBatteryProtection=upsBatteryProtection, upsAmbientTemperatureMin=upsAmbientTemperatureMin, upsServer=upsServer, upsInfoSerial=upsInfoSerial, upsInfoPowerNominal=upsInfoPowerNominal, upsBatteryChargeLow=upsBatteryChargeLow, upsInputFrequencyExtend=upsInputFrequencyExtend, upsInputTransferTrimLow=upsInputTransferTrimLow, upsDeviceLocation=upsDeviceLocation, upsBatteryRuntimeLow=upsBatteryRuntimeLow, upsInfoTime=upsInfoTime, upsInfoMfrName=upsInfoMfrName, upsInfoLoad=upsInfoLoad, upsInfoLoadValue=upsInfoLoadValue, upsInfoFirmwareName=upsInfoFirmwareName, upsInfoDelayReboot=upsInfoDelayReboot, upsCompliance=upsCompliance, upsInfoStartReboot=upsInfoStartReboot, upsOutput=upsOutput, upsInfoFirmware=upsInfoFirmware, upsInputVoltageFault=upsInputVoltageFault, upsOutputCurrent=upsOutputCurrent, upsOutputVoltage=upsOutputVoltage, upsServerVersion=upsServerVersion, upsInputTransferHighMax=upsInputTransferHighMax, upsGroups=upsGroups, upsInfoRealPower=upsInfoRealPower, upsInfoDelayStart=upsInfoDelayStart, upsBatteryMfrDate=upsBatteryMfrDate, upsDeviceMACAddr=upsDeviceMACAddr, upsInputVoltageValue=upsInputVoltageValue, upsInputFrequencyHigh=upsInputFrequencyHigh, upsInfoStart=upsInfoStart, upsDevice=upsDevice, upsInfoModel=upsInfoModel, upsAmbientTemperature=upsAmbientTemperature, upsInfoTestResult=upsInfoTestResult, upsInputTransferLowMax=upsInputTransferLowMax, upsAmbientTemperatureValue=upsAmbientTemperatureValue, upsBatteryAlarmThreshold=upsBatteryAlarmThreshold, upsDeviceSerial=upsDeviceSerial, upsAmbientTemperatureMax=upsAmbientTemperatureMax, upsDriverVersionInternal=upsDriverVersionInternal, upsDriverPort=upsDriverPort, upsOutputFrequencyValue=upsOutputFrequencyValue, upsAmbientTemperatureLow=upsAmbientTemperatureLow, upsInputFrequencyLow=upsInputFrequencyLow)

#
# PySNMP MIB module SYNOLOGY-FLASHCACHE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./SYNOLOGY-FLASHCACHE-MIB.txt
# Produced by pysmi-1.1.11 at Wed Jan 10 17:45:24 2024
# On host pablo-VBox platform Linux version 6.2.0-39-generic by user pablo
# Using Python version 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Unsigned32, Gauge32, Counter64, TimeTicks, MibIdentifier, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter32, Integer32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "TimeTicks", "MibIdentifier", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter32", "Integer32", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
flashCache = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 103))
flashCache.setRevisions(('2014-07-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: flashCache.setRevisionsDescriptions(('First draft.',))
if mibBuilder.loadTexts: flashCache.setLastUpdated('201407170000Z')
if mibBuilder.loadTexts: flashCache.setOrganization('www.synology.com')
if mibBuilder.loadTexts: flashCache.setContactInfo('Synology Inc. Email: snmp@synology.com')
if mibBuilder.loadTexts: flashCache.setDescription('Characteristics of the flash cache information')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
flashCacheTable = MibTable((1, 3, 6, 1, 4, 1, 6574, 103, 1), )
if mibBuilder.loadTexts: flashCacheTable.setStatus('current')
if mibBuilder.loadTexts: flashCacheTable.setDescription('Table of flash cache devices and how much data they have read/written.')
flashCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1), ).setIndexNames((0, "SYNOLOGY-FLASHCACHE-MIB", "flashCacheIndex"))
if mibBuilder.loadTexts: flashCacheEntry.setStatus('current')
if mibBuilder.loadTexts: flashCacheEntry.setDescription('An entry containing a device and its statistics.')
flashCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: flashCacheIndex.setStatus('current')
if mibBuilder.loadTexts: flashCacheIndex.setDescription('Reference index for each observed device.')
flashCacheSSDDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheSSDDev.setStatus('current')
if mibBuilder.loadTexts: flashCacheSSDDev.setDescription('The ssd device on flashcache we are counting/checking.')
flashCacheSpaceDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheSpaceDev.setStatus('current')
if mibBuilder.loadTexts: flashCacheSpaceDev.setDescription('The space device on flashcache we are counting/checking.')
flashCacheReadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheReadHits.setStatus('current')
if mibBuilder.loadTexts: flashCacheReadHits.setDescription('The number of reads on flash cache.')
flashCacheWriteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheWriteHits.setStatus('current')
if mibBuilder.loadTexts: flashCacheWriteHits.setDescription('The number of writes on flash cache.')
flashCacheDiskRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheDiskRead.setStatus('current')
if mibBuilder.loadTexts: flashCacheDiskRead.setDescription('The number of reads on disk.')
flashCacheDiskWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheDiskWrite.setStatus('current')
if mibBuilder.loadTexts: flashCacheDiskWrite.setDescription('The number of writes on disk.')
flashCacheTotalRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheTotalRead.setStatus('current')
if mibBuilder.loadTexts: flashCacheTotalRead.setDescription('The number of reads on volume with flash cache.')
flashCacheTotalWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheTotalWrite.setStatus('current')
if mibBuilder.loadTexts: flashCacheTotalWrite.setDescription('The number of writes on volume with flash cache.')
flashCacheReadHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheReadHitRate.setStatus('current')
if mibBuilder.loadTexts: flashCacheReadHitRate.setDescription('The read hit rate of flash cache (%)')
flashCacheWriteHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheWriteHitRate.setStatus('current')
if mibBuilder.loadTexts: flashCacheWriteHitRate.setDescription('The write hit rate of flash cache (%)')
flashCacheReadSeqSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheReadSeqSkip.setStatus('current')
if mibBuilder.loadTexts: flashCacheReadSeqSkip.setDescription('The number of skipped sequential reads on flash cache.')
flashCacheWriteSeqSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheWriteSeqSkip.setStatus('current')
if mibBuilder.loadTexts: flashCacheWriteSeqSkip.setDescription('The number of skipped sequential writes on flash cache.')
flashCacheWriteMissSsd = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheWriteMissSsd.setStatus('current')
if mibBuilder.loadTexts: flashCacheWriteMissSsd.setDescription('The number of data writes to SSD for the first time.')
flashCacheSsdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 103, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCacheSsdUuid.setStatus('current')
if mibBuilder.loadTexts: flashCacheSsdUuid.setDescription('The ssd UUID on flashcache we are counting/checking.')
flashCacheConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 103, 2))
flashCacheCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 103, 2, 1))
flashCacheGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 103, 2, 2))
flashCacheCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 103, 2, 1, 1)).setObjects(("SYNOLOGY-FLASHCACHE-MIB", "flashCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    flashCacheCompliance = flashCacheCompliance.setStatus('current')
if mibBuilder.loadTexts: flashCacheCompliance.setDescription('The compliance statement for flash cache entities which implement the SYNOLOGY FLASHCACHE MIB.')
flashCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 103, 2, 2, 1)).setObjects(("SYNOLOGY-FLASHCACHE-MIB", "flashCacheSSDDev"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheSpaceDev"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheReadHits"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheWriteHits"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheDiskRead"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheDiskWrite"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheTotalRead"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheTotalWrite"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheReadHitRate"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheWriteHitRate"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheReadSeqSkip"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheWriteSeqSkip"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheWriteMissSsd"), ("SYNOLOGY-FLASHCACHE-MIB", "flashCacheSsdUuid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    flashCacheGroup = flashCacheGroup.setStatus('current')
if mibBuilder.loadTexts: flashCacheGroup.setDescription('A collection of objects providing basic information of an synology flash cache entity.')
mibBuilder.exportSymbols("SYNOLOGY-FLASHCACHE-MIB", flashCacheSpaceDev=flashCacheSpaceDev, flashCacheDiskRead=flashCacheDiskRead, flashCacheConformance=flashCacheConformance, flashCacheWriteHits=flashCacheWriteHits, flashCacheEntry=flashCacheEntry, flashCacheReadHits=flashCacheReadHits, flashCacheIndex=flashCacheIndex, flashCacheTotalRead=flashCacheTotalRead, flashCacheGroup=flashCacheGroup, synology=synology, flashCacheReadSeqSkip=flashCacheReadSeqSkip, flashCacheWriteHitRate=flashCacheWriteHitRate, flashCacheCompliances=flashCacheCompliances, flashCacheSsdUuid=flashCacheSsdUuid, flashCacheWriteSeqSkip=flashCacheWriteSeqSkip, PYSNMP_MODULE_ID=flashCache, flashCacheWriteMissSsd=flashCacheWriteMissSsd, flashCacheTable=flashCacheTable, flashCache=flashCache, flashCacheReadHitRate=flashCacheReadHitRate, flashCacheGroups=flashCacheGroups, flashCacheSSDDev=flashCacheSSDDev, flashCacheCompliance=flashCacheCompliance, flashCacheDiskWrite=flashCacheDiskWrite, flashCacheTotalWrite=flashCacheTotalWrite)
